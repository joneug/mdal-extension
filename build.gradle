plugins {
    id "de.undercouch.download" version "4.0.4"
    id "com.github.node-gradle.node" version "2.2.3"
}
apply plugin: 'base'

node {
	version = '12.16.3'
	npmVersion = '6.14.5'
	download = true
}

project.ext {
  mdalReleasesUrl = 'https://api.github.com/repos/mdal-lang/mdal/releases/tags/v0.4.0'
}

import groovy.json.JsonSlurper

def packageSlurper = new JsonSlurper()
def packageJson = packageSlurper.parse file('package.json')
version = packageJson.version

task downloadMdalRelease(type: Download) {
    src {
        def json = new JsonSlurper().parseText((new URL(mdalReleasesUrl)).text)
        return json['assets'].first()['browser_download_url']
    }
    dest new File(temporaryDir, 'mdal.zip')
    onlyIfModified true
}

task copyApplication(dependsOn: downloadMdalRelease, type: Sync) {
    from zipTree(downloadMdalRelease.dest)
    into 'mdal'
}

task copyApplicationLocal(type: Sync) {
    from zipTree(new File('../mdal/de.joneug.mdal.ide/build/distributions', 'de.joneug.mdal.ide-0.3.0.zip'))
    into 'mdal'
}

def inputFiles = fileTree(
    dir: projectDir, 
    excludes: [ 'out/**', '.gitignore', '.gradle/**', 'build/**', '*.gradle' ]
)

npmInstall {
    inputs.files(inputFiles)
    outputs.dir('out')
}

npmInstall.dependsOn copyApplication

task npmInstallVsce(type: NpmTask, dependsOn: npmSetup) {
	ext.destPath = "$rootProject.projectDir/node_modules/vsce" 
	outputs.dir(destPath)
	group 'Node'
	description 'Installs the NodeJS package "Visual Studio Code Extension Manager"'
	args = [ 'install', 'vsce' ]
}

plugins.withType(com.moowork.gradle.node.NodePlugin) {
	node {
		workDir = file("$rootProject.buildDir/nodejs")
		nodeModulesDir = rootProject.projectDir
	}
}

task vscodeExtension(dependsOn: [npmInstall, npmInstallVsce], type: NodeTask) {
    ext.destDir = new File(buildDir, 'vscode')
    ext.archiveName = "$project.name-${project.version}.vsix"
    ext.destPath = "$destDir/$archiveName"
    inputs.with {
        files inputFiles
        dir npmInstallVsce.destPath
    }
    outputs.dir destDir
    doFirst {
        destDir.mkdirs()
    }
    script = file("$npmInstallVsce.destPath/out/vsce")
    args = [ 'package', '--out', destPath ]
    execOverrides {
        workingDir = projectDir
    }
}

task installExtension(type: Exec, dependsOn: vscodeExtension) {
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'code.cmd'
    } else {
        commandLine '/usr/local/bin/code'
    }
    args '--install-extension', vscodeExtension.destPath
}

task startCode(type:Exec, dependsOn: installExtension) {
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'code.cmd'
    } else {
        commandLine '/usr/local/bin/code'
    }
    args '--new-window'
}

task debugCode(type:Exec, dependsOn: vscodeExtension) {
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'code.cmd'
    } else {
        commandLine '/usr/local/bin/code'
    }
    args "--extensionDevelopmentPath=$rootProject.projectDir", '--inspect-extensions=9993'
} 

clean {
    doLast {
        delete copyApplication.outputs
        delete vscodeExtension.destDir
		delete 'out'
    }
}

build.dependsOn vscodeExtension

task publishVSM(dependsOn: vscodeExtension, type: NodeTask) {
    script = file("$rootProject.projectDir/node_modules/vsce/out/vsce")
    args = [ 'publish', '-p', System.getenv('VSCE_TOKEN'), "--packagePath", "${project.buildDir}/vscode/mdal-vscode-${project.version}.vsix"]
    execOverrides {
        workingDir = projectDir
    }
}

task publishOVSX(dependsOn: vscodeExtension, type: Exec) {
    commandLine 'npx', 'ovsx', 'publish', "${project.buildDir}/vscode/mdal-vscode-${project.version}.vsix", '-p', System.getenv('OVSX_TOKEN')
}
